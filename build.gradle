buildscript {
	ext.kotlin_version = "1.1.1"
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
	}
}

plugins {
	id "nebula.dependency-lock" version "4.9.4"
	id "org.jetbrains.intellij" version "0.2.16"
	id "org.jetbrains.kotlin.jvm" version "1.1.1"
}
apply plugin:"java"
apply plugin:"groovy"
apply plugin:"kotlin"
apply plugin:"idea"
apply plugin:"org.jetbrains.intellij"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "lib" }
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
		apiVersion = "1.0"
		languageVersion = "1.0"
	}
}

intellij {
	version = "IU-172.3757.29"
	type = "IU"
	// The artifact name is deliberately not "live-plugin" because plugins are stored in the "live-plugins" directory.
	// The "LivePlugin" directory is deleted on each plugin update so it's good make it distinct from "live-plugins".
	pluginName = "LivePlugin"
	downloadSources = true
	sameSinceUntilBuild = false
	updateSinceUntilBuild = false
	plugins = ["Groovy", "Kotlin", "git4idea", "github", "junit"]
}
dependencyLock {
	lockFile = "dependencyLock.json"
	configurationNames = ["runtime"]
	includeTransitives = true
}

dependencies {
	// Bundle kotlin compiler and stdlib with LivePlugin because IDEs are not bundled with kotlin-compiler
	// and kotlin jars are more likely to be updated in IDE than groovy
	// so it seems more reliable to bundle the right version of kotlin jars.
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-compiler-embeddable', version: '1.1.4'
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.1.4'
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.1.4'

	// Scala and clojure libs are optional and can be downloaded from LivePlugin at runtime.
	compile group: 'org.clojure', name: 'clojure', version: '1.8.0'
	compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.12.3'
	compile group: 'org.scala-lang', name: 'scala-library', version: '2.12.3'
	compile group: 'org.scala-lang', name: 'scala-reflect', version: '2.12.3'
	
	testCompile group: 'junit', name: 'junit', version: '4.12' // includes hamcrest-core
}
excludeFilesFromIdePluginZipMatching(".*scala-.*", ".*clojure-.*")
// Add .groovy files so that LivePlugin source code is available for navigation at runtime.
addGroovySourceCodeToCompilerOutput()

sourceSets {
	main {
		java { srcDir "src" }
		groovy { srcDir "src_groovy" }
		resources { srcDir "resources" }
		resources { srcDir "plugin_examples" }
	}
	test {
		groovy { srcDir "test_groovy" }
	}
}

task installLivePlugin() { doLast {
	def version = new File("resources/META-INF/plugin.xml").readLines()
			.find { it.contains("<version>") }
			.replaceFirst(".*<version>", "")
			.replaceFirst("</version>.*", "")
	def localMavenPath = repositories.mavenLocal().url.path + "/liveplugin/live-plugin/"
	def toFile = "${localMavenPath}/${version}/live-plugin-${version}.jar"

	ant.copy(
		file: "LivePlugin.jar",
		toFile: toFile
	)

	println("Installed to local maven liveplugin version " + version)
	println("Path: ${toFile}")
} }

def excludeFilesFromIdePluginZipMatching(String... regexes) {
	def files = configurations.compile.resolvedConfiguration.files.findAll { file ->
		regexes.any {
			file.name.matches(it)
		}
	}
	prepareSandbox.setLibrariesToIgnore(files.toArray())
}

def addGroovySourceCodeToCompilerOutput() {
	task instrument() {
		def classesFolder = project.tasks.findByName(JavaPlugin.COMPILE_JAVA_TASK_NAME).destinationDir
		ant.copy(toDir: classesFolder.absolutePath + "/src", overwrite: true) {
			ant.fileset(dir: "./src_groovy", includes: "**/*")
		}
	}
	compileJava.doLast {
		tasks.instrument.execute()
	}
}