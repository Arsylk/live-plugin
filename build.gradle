buildscript {
	ext.kotlin_version = "1.1.1"
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
	}
}

plugins {
	id "org.jetbrains.intellij" version "0.2.16"
	id "org.jetbrains.kotlin.jvm" version "1.1.1"
}
apply plugin:"java"
apply plugin:"groovy"
apply plugin:"kotlin"
apply plugin:"idea"
apply plugin:"org.jetbrains.intellij"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "lib" }
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
		apiVersion = "1.0"
		languageVersion = "1.0"
	}
}

intellij {
	version = "IU-172.3757.29"
	type = "UI"
	pluginName = "live-plugin"
	downloadSources = true
	sameSinceUntilBuild = false
	updateSinceUntilBuild = false
	plugins = ["Groovy", "Kotlin", "git4idea", "github", "junit"]
}

enableProvidedScope()

dependencies {
	provided group: 'org.jetbrains.kotlin', name: 'kotlin-compiler-embeddable', version: '1.1.3'
	provided group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.1.3'
	provided group: 'org.clojure', name: 'clojure', version: '1.7.0'
	provided group: 'org.scala-lang', name: 'scala-compiler', version: '2.11.7'
	// also includes scala-parser-combinators, scala-xml
	provided group: 'org.scala-lang', name: 'scala-library', version: '2.11.7'
	provided group: 'org.scala-lang', name: 'scala-reflect', version: '2.11.7'
	testCompile group: 'junit', name: 'junit', version: '4.10' // also includes hamcrest-core
}
excludeFromPluginZip(".*scala-.*", ".*clojure-.*")

sourceSets {
	main {
		java { srcDir "src" }
		groovy { srcDir "src_groovy" }
		resources { srcDir "resources" }
		resources { srcDir "plugin_examples" }
	}
	test {
		groovy { srcDir "test_groovy" }
	}
}

// Need this task to be executed before plugin run configuration
// because for some reason IntelliJ doesn't reliably copy resources with current project configuration
task copyResources { doLast {
	def metaInfFolder = "${pluginsSandbox}/plugins/LivePlugin/META-INF"
	println("Copying resources to ${metaInfFolder}")
	ant.copy(toDir: metaInfFolder, overwrite: true) {
		ant.fileset(dir: "./resources/META-INF", includes: "**/*")
	}

	def classesFolder = "${pluginsSandbox}/plugins/LivePlugin/classes"
	println("Copying resources to ${classesFolder}")

	ant.copy(toDir: classesFolder, overwrite: true) {
		ant.fileset(dir: "./out/production/classes", includes: "**/*")
	}
	ant.copy(toDir: classesFolder, overwrite: true) {
		ant.fileset(dir: "./plugin_examples", includes: "**/*")
	}
	ant.copy(toDir: classesFolder, overwrite: true) {
		ant.fileset(dir: "./resources", includes: "**/*")
	}
	ant.copy(toDir: classesFolder + "/src", overwrite: true) {
		ant.fileset(dir: "./src_groovy", includes: "**/*")
	}
} }

task installLivePlugin() { doLast {
	def version = new File("resources/META-INF/plugin.xml").readLines()
			.find { it.contains("<version>") }
			.replaceFirst(".*<version>", "")
			.replaceFirst("</version>.*", "")
	def localMavenPath = repositories.mavenLocal().url.path + "/liveplugin/live-plugin/"
	def toFile = "${localMavenPath}/${version}/live-plugin-${version}.jar"

	ant.copy(
		file: "LivePlugin.jar",
		toFile: toFile
	)

	println("Installed to local maven liveplugin version " + version)
	println("Path: ${toFile}")
} }


def enableProvidedScope() {
	configurations {
		provided
		compile.extendsFrom provided
	}
	idea {
		module { scopes.PROVIDED.plus += [configurations.provided] }
	}
}

def excludeFromPluginZip(String... regexes) {
	def files = configurations.compile.resolvedConfiguration.files.findAll { file ->
		regexes.any {
			file.name.matches(it)
		}
	}
	prepareSandbox.setLibrariesToIgnore(files.toArray())
}
